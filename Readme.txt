1. Почему на любом объекте можем вызвать метод getClass()?
Метод getClass() определён в классе Object, который является суперклассом для всех классов в Java.
Это значит, что любой объект, созданный в Java, наследует этот метод от Object.

2. Почему на любом классе можем вызвать .class?
Суффикс .class — это способ получения объекта типа Class, представляющего метаданные указанного класса.
Он не зависит от экземпляра класса и является статическим (вызывается на уровне типа).

3. В чём отличие динамического прокси от статического? Приведите преимущества и недостатки.

Статический прокси

Вручную создаётся класс-прокси, который реализует интерфейс целевого объекта.
Этот класс содержит код для передачи вызовов метода на реальный объект.
	- Преимущества:
	•	Простота реализации.
	•	Не требует дополнительных библиотек.
	•	Производительность лучше, чем у динамических прокси.
	- Недостатки:
	•	Не гибкий, требует написания кода вручную для каждого интерфейса.
	•	Если интерфейсов много, это может привести к избыточности кода.


Динамический прокси

Создаётся на этапе выполнения программы с использованием java.lang.reflect.Proxy.
Не требует написания отдельного класса для каждого интерфейса.
	- Преимущества:
	•	Гибкость: прокси создаётся для любого интерфейса во время выполнения.
	•	Удобен для общих задач, таких как логирование, проверка прав доступа и т.д.
	- Недостатки:
	•	Производительность ниже, так как создаётся на этапе выполнения.
	•	Ограничение: работает только с интерфейсами (в стандартной Java).
